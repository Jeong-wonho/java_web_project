package com.day.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.day.dto.Customer;
import com.day.exception.AddException;
import com.day.exception.FindException;
import com.day.exception.ModifyException;
import com.day.sql.MyConnection;

@Repository("customerDAO")
public class CustomerDAOOracle implements CustomerDAO{
	
//	@Autowired
//	private DataSource ds;
	@Autowired
	private SqlSessionFactory sessionFactory;
	@Override
	public void insert(Customer c) throws AddException {
		//DB연결
		SqlSession session = null;
		try {
			session = sessionFactory.openSession();
			session.insert("com.day.dto.CustomerMapper.insert", c);
			session.commit();
		}catch(Exception e) {
			e.printStackTrace();
			throw new AddException(e.getMessage());
		}finally {
			if(session != null) {
				session.close();
			}
		}
	

	}

	@Override
	public Customer selectById(String id) throws FindException {
		SqlSession session = null;
		try {
			session = sessionFactory.openSession();
			Customer c =session.selectOne("com.day.dto.CustomerMapper.insert", id);
			
			return c;
		} catch (Exception e) {
			e.printStackTrace();
			throw new FindException(e.getMessage());
		} finally {
			if(session != null) {
				session.close();
			}
		}
	}

	@Override
	public void update(Customer c) throws ModifyException {
		//고정값 변수선언
		//SET pwd = 'p1', name = 'n1', buildingno = '1';
		String updateSQL = "UPDATE customer SET ";
		String updateSQL1 = " WHERE id = ?";
		 //변경할 값이 있는경우 true, 변경할 값이 없으면 false.
		boolean flag = false;
		//비밀번호를 변경할 경우
		String pwd = c.getPwd();
		if (pwd!=null && !pwd.equals("")) {
			updateSQL += "pwd = '" + pwd + "'"; 
			flag = true;			
		}		
		//이름을 변경할 경우
		String name = c.getName();
		if (name != null && !name.equals("")) {
			if(flag) {
				// SET절에서 수정할 내용을 추가할 경우에는 ,가 필요하기 때문
				updateSQL += ","; 
			}
			updateSQL += "name = '" + name + "'";
			flag = true;
		}
		//주소를 변경할 경우.
		String buildingno = c.getBuildingno();
		if (buildingno != null && !buildingno.equals("")) {
			if(flag) {
				updateSQL += ",";
			}
			updateSQL += "buildingno = '" + buildingno + "'";
			flag = true;
		}
		//
		int enabled = c.getEnabled();
		if (enabled > -1) { //0=탈퇴, 1=활동
			if(flag) {
				updateSQL += ",";
			}
			updateSQL += "enabled = '" + enabled + "'";
			flag = true;
		}
		System.out.println(updateSQL + updateSQL1);
		if(!flag) {
			throw new ModifyException("수정할 내용이 없습니다");
		}
//		Connection con = null;
//		try {
//			con = MyConnection.getConnection();
//		} catch (SQLException e) {			
//			e.printStackTrace();
//		}
//		updateSQL + updateSQL1
	}
	
	public static void main(String[] args) {
		CustomerDAOOracle dao = new CustomerDAOOracle();
		Customer c = new Customer();
		//c.setId("id1");
		//c.setPwd("pp1");
		//c.setName("nn1");
		//c.setBuildingno("b1");
		//c.setEnabled(-1);
		try {
			dao.selectById("id1");
			System.out.println(dao.selectById("id1"));
		} catch (FindException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		

	}
	
}
